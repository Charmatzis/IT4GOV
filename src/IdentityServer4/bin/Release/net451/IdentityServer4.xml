<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IdentityServer4</name>
    </assembly>
    <members>
        <member name="F:IdentityServer4.Core.Constants.StandardScopes.OpenId">
            <summary>REQUIRED. Informs the Authorization Server that the Client is making an OpenID Connect request. If the <c>openid</c> scope value is not present, the behavior is entirely unspecified.</summary>
        </member>
        <member name="F:IdentityServer4.Core.Constants.StandardScopes.Profile">
            <summary>OPTIONAL. This scope value requests access to the End-User's default profile Claims, which are: <c>name</c>, <c>family_name</c>, <c>given_name</c>, <c>middle_name</c>, <c>nickname</c>, <c>preferred_username</c>, <c>profile</c>, <c>picture</c>, <c>website</c>, <c>gender</c>, <c>birthdate</c>, <c>zoneinfo</c>, <c>locale</c>, and <c>updated_at</c>.</summary>
        </member>
        <member name="F:IdentityServer4.Core.Constants.StandardScopes.Email">
            <summary>OPTIONAL. This scope value requests access to the <c>email</c> and <c>email_verified</c> Claims.</summary>
        </member>
        <member name="F:IdentityServer4.Core.Constants.StandardScopes.Address">
            <summary>OPTIONAL. This scope value requests access to the <c>address</c> Claim.</summary>
        </member>
        <member name="F:IdentityServer4.Core.Constants.StandardScopes.Phone">
            <summary>OPTIONAL. This scope value requests access to the <c>phone_number</c> and <c>phone_number_verified</c> Claims.</summary>
        </member>
        <member name="F:IdentityServer4.Core.Constants.StandardScopes.OfflineAccess">
            <summary>This scope value MUST NOT be used with the OpenID Connect Implicit Client Implementer's Guide 1.0. See the OpenID Connect Basic Client Implementer's Guide 1.0 (http://openid.net/specs/openid-connect-implicit-1_0.html#OpenID.Basic) for its usage in that subset of OpenID Connect.</summary>
        </member>
        <member name="T:IdentityServer4.Core.Configuration.AuthenticationOptions">
            <summary>
            Configures the login and logout views and behavior.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Configuration.AuthenticationOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Configuration.AuthenticationOptions"/> class.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.AuthenticationOptions.EnableLocalLogin">
            <summary>
            Gets or sets a value indicating whether local login is enabled.
            Disabling this setting will not display the username/password form on the login page. This also will disable the resource owner password flow.
            Defaults to true.
            </summary>
            <value>
              <c>true</c> if local login is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.AuthenticationOptions.EnableSignOutPrompt">
            <summary>
            Gets or sets a value indicating whether IdentityServer will show a confirmation page for sign-out.
            When a client initiates a sign-out, by default IdentityServer will ask the user for confirmation. This is a mitigation technique against "logout spam".
            Defaults to true.
            </summary>
            <value>
            <c>true</c> if sign-out prompt is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.AuthenticationOptions.RequireAuthenticatedUserForSignOutMessage">
            <summary>
            Indicates if user must be authenticated to accept parameters to end session endpoint. Defaults to false.
            </summary>
            <value>
            <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.AuthenticationOptions.SignInMessageThreshold">
            <summary>
            Gets or sets the limit after which old signin messages are purged.
            Defaults to the value defined in <see cref="F:IdentityServer4.Core.Constants.SignInMessageThreshold"/> value.
            </summary>
            <value>
            The limit after which old signin messages are purged
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Configuration.CookieOptions">
            <summary>
            Configured how cookies are managed by IdentityServer.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Configuration.CookieOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Configuration.CookieOptions"/> class.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.CookieOptions.Prefix">
            <summary>
            Allows setting a prefix on cookies to avoid potential conflicts with other cookies with the same names.
            </summary>
            <value>
            The prefix.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.CookieOptions.ExpireTimeSpan">
            <summary>
            The expiration duration of the authentication cookie. Defaults to 10 hours.
            </summary>
            <value>
            The expire time span.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.CookieOptions.IsPersistent">
            <summary>
            Gets or sets a value indicating whether the authentication cookie is marked as persistent. Defaults to <c>false</c>.
            </summary>
            <value>
            <c>true</c> if persistent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.CookieOptions.SlidingExpiration">
            <summary>
            Gets or sets a value indicating if the authentication cookie is sliding, which means it auto renews as the user is active. Defaults to <c>false</c>.
            </summary>
            <value>
              <c>true</c> if sliding; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.CookieOptions.Path">
            <summary>
            Gets or sets the cookie path.
            </summary>
            <value>
            The cookie path.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.CookieOptions.AllowRememberMe">
            <summary>
            Gets or sets a value indicating whether the "remember me" option is presented to users on the login page. 
            If selected this option will issue a persistent authentication cookie. Defaults to true.
            </summary>
            <value>
              <c>true</c> if allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.CookieOptions.RememberMeDuration">
            <summary>
            Gets or sets the duration of the persistent cookie issued by the "remember me" option on the login page.
            Defaults to 30 days.
            </summary>
            <value>
            The duration of the "remember me" persistent cookie.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.CookieOptions.SecureMode">
            <summary>
            Gets or sets the mode for issuing the secure flag on the cookies issued. Defaults to SameAsRequest.
            </summary>
            <value>
            The secure.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Configuration.CookieSecureMode">
            <summary>
            Indicates if secure flag should be issued for a cookie.
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Configuration.CookieSecureMode.SameAsRequest">
            <summary>
            The secure flag will be issued if the request is HTTPS.
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Configuration.CookieSecureMode.Always">
            <summary>
            The secure flag will always be issued.
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Configuration.CspOptions">
            <summary>
            Configures Content Security Policy (CSP) for HTML pages rendered by IdentityServer.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Configuration.CspOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Configuration.CspOptions"/> class.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.CspOptions.Enabled">
            <summary>
            Gets or sets a value indicating whether CSP is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.CspOptions.ScriptSrc">
            <summary>
            Allows additional script sources to be indicated.
            </summary>
            <value>
            The script source.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.CspOptions.StyleSrc">
            <summary>
            Allows additional style sources to be indicated.
            </summary>
            <value>
            The style source.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.CspOptions.FontSrc">
            <summary>
            Allows additional font sources to be indicated.
            </summary>
            <value>
            The font source.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.CspOptions.ConnectSrc">
            <summary>
            Allows additional connect sources to be indicated.
            </summary>
            <value>
            The connect source.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.CspOptions.ImgSrc">
            <summary>
            Allows additional image sources to be indicated.
            </summary>
            <value>
            The connect source.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Configuration.DiscoveryOptions">
            <summary>
            Options class to configure discovery endpoint
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.DiscoveryOptions.ShowEndpoints">
            <summary>
            Show endpoints
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.DiscoveryOptions.ShowKeySet">
            <summary>
            Show signing keys
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.DiscoveryOptions.ShowIdentityScopes">
            <summary>
            Show identity scopes
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.DiscoveryOptions.ShowResourceScopes">
            <summary>
            Show resource scopes
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.DiscoveryOptions.ShowClaims">
            <summary>
            Show identity claims
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.DiscoveryOptions.ShowResponseTypes">
            <summary>
            Show response types
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.DiscoveryOptions.ShowResponseModes">
            <summary>
            Show response modes
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.DiscoveryOptions.ShowGrantTypes">
            <summary>
            Show standard grant types
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.DiscoveryOptions.ShowCustomGrantTypes">
            <summary>
            Show custom grant types
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.DiscoveryOptions.ShowTokenEndpointAuthenticationMethods">
            <summary>
            Show token endpoint authentication methods
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.DiscoveryOptions.CustomEntries">
            <summary>
            Adds custom entries to the discovery document
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Configuration.DiscoveryOptions.#ctor">
            <summary>
            Initializes with default values
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Configuration.EndpointOptions">
            <summary>
            Configures which endpoints are enabled or disabled.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Configuration.EndpointOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Configuration.EndpointOptions"/> class.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EndpointOptions.EnableAuthorizeEndpoint">
            <summary>
            Gets or sets a value indicating whether the authorize endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the authorize endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EndpointOptions.EnableTokenEndpoint">
            <summary>
            Gets or sets a value indicating whether the token endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the token endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EndpointOptions.EnableUserInfoEndpoint">
            <summary>
            Gets or sets a value indicating whether the user info endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the user info endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EndpointOptions.EnableDiscoveryEndpoint">
            <summary>
            Gets or sets a value indicating whether the discovery document endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the disdovery document endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EndpointOptions.EnableAccessTokenValidationEndpoint">
            <summary>
            Gets or sets a value indicating whether the access token validation endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the access token validation endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EndpointOptions.EnableIdentityTokenValidationEndpoint">
            <summary>
            Gets or sets a value indicating whether the identity token validation endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the identity token validation endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EndpointOptions.EnableEndSessionEndpoint">
            <summary>
            Gets or sets a value indicating whether the end session endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the end session endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EndpointOptions.EnableClientPermissionsEndpoint">
            <summary>
            Gets or sets a value indicating whether the client permissions endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the client permissions endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EndpointOptions.EnableCspReportEndpoint">
            <summary>
            Gets or sets a value indicating whether the CSP report endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the CSP report endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EndpointOptions.EnableCheckSessionEndpoint">
            <summary>
            Gets or sets a value indicating whether the check session endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the check session endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EndpointOptions.EnableTokenRevocationEndpoint">
            <summary>
            Gets or sets a value indicating whether the token revocation endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the token revocation endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EndpointOptions.EnableIntrospectionEndpoint">
            <summary>
            Gets or sets a value indicating whether the introspection endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the introspection endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Configuration.EventsOptions">
            <summary>
            Configures events
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EventsOptions.RaiseSuccessEvents">
            <summary>
            Gets or sets a value indicating whether to raise success events.
            </summary>
            <value>
              <c>true</c> if success event should be raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EventsOptions.RaiseFailureEvents">
            <summary>
            Gets or sets a value indicating whether to raise failure events.
            </summary>
            <value>
              <c>true</c> if failure events should be raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EventsOptions.RaiseInformationEvents">
            <summary>
            Gets or sets a value indicating whether to raise information events.
            </summary>
            <value>
            <c>true</c> if information events should be raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.EventsOptions.RaiseErrorEvents">
            <summary>
            Gets or sets a value indicating whether to raise error events.
            </summary>
            <value>
              <c>true</c> if error events should be raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Configuration.IdentityServerOptions">
            <summary>
            The IdentityServerOptions class is the top level container for all configuration settings of IdentityServer.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Configuration.IdentityServerOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Configuration.IdentityServerOptions"/> class with default values.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.IdentityServerOptions.SiteName">
            <summary>
            Gets or sets the display name of the site used in standard views.
            </summary>
            <value>
            Display name of the site used in standard views.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.IdentityServerOptions.IssuerUri">
            <summary>
            Gets or sets the unique name of this server instance, e.g. https://myissuer.com
            </summary>
            <value>
            Unique name of this server instance, e.g. https://myissuer.com
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.IdentityServerOptions.SigningCertificate">
            <summary>
            Gets or sets the X.509 certificate (and corresponding private key) for signing security tokens.
            </summary>
            <value>
            The signing certificate.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.IdentityServerOptions.SecondarySigningCertificate">
            <summary>
            Gets or sets a secondary certificate that will appear in the discovery document. Can be used to prepare clients for certificate rollover
            </summary>
            <value>
            The secondary signing certificate.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.IdentityServerOptions.RequireSsl">
            <summary>
            Gets or sets a value indicating whether SSL is required for IdentityServer. Defaults to `true`.
            </summary>
            <value>
              <c>true</c> if SSL is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.IdentityServerOptions.Endpoints">
            <summary>
            Gets or sets the endpoint configuration.
            </summary>
            <value>
            The endpoints configuration.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.IdentityServerOptions.DiscoveryOptions">
            <summary>
            Gets or sets the discovery endpoint configuration.
            </summary>
            <value>
            The discovery endpoint configuration.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.IdentityServerOptions.AuthenticationOptions">
            <summary>
            Gets or sets the authentication options.
            </summary>
            <value>
            The authentication options.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.IdentityServerOptions.ProtocolLogoutUrls">
            <summary>
            Gets or sets the protocol logout urls.
            </summary>
            <value>
            The protocol logout urls.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.IdentityServerOptions.CspOptions">
            <summary>
            Gets or sets the CSP options.
            </summary>
            <value>
            The CSP options.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.IdentityServerOptions.EventsOptions">
            <summary>
            Gets or sets the events options.
            </summary>
            <value>
            The events options.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.IdentityServerOptions.InputLengthRestrictions">
            <summary>
            Gets or sets the max input length restrictions.
            </summary>
            <value>
            The length restrictions.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.IdentityServerOptions.EnableWelcomePage">
            <summary>
            Gets or sets a value indicating whether the welcome page is enabled.
            </summary>
            <value>
            <c>true</c> if the welcome page is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Configuration.InputLengthRestrictions">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Configuration.InputLengthRestrictions.#ctor">
            <summary>
            Creates InputLengthRestrictions with default values
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.ClientId">
            <summary>
            Max length for client_id
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.ClientSecret">
            <summary>
            Max length for external client secrets
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.Scope">
            <summary>
            Max length for scope
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.RedirectUri">
            <summary>
            Max length for redirect_uri
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.Nonce">
            <summary>
            Max length for nonce
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.UiLocale">
            <summary>
            Max length for ui_locale
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.LoginHint">
            <summary>
            Max length for login_hint
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.AcrValues">
            <summary>
            Max length for acr_values
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.GrantType">
            <summary>
            Max length for grant_type
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.UserName">
            <summary>
            Max length for username
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.Password">
            <summary>
            Max length for password
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.CspReport">
            <summary>
            Max length for CSP reports
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.IdentityProvider">
            <summary>
            Max length for external identity provider name
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.ExternalError">
            <summary>
            Max length for external identity provider errors
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.AuthorizationCode">
            <summary>
            Max length for authorization codes
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.RefreshToken">
            <summary>
            Max length for refresh tokens
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.TokenHandle">
            <summary>
            Max length for token handles
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Configuration.InputLengthRestrictions.Jwt">
            <summary>
            Max length for JWTs
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Events.AuthenticationDetails">
            <summary>
            Event details for authentication events
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.AuthenticationDetails.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.AuthenticationDetails.Name">
            <summary>
            Gets or sets the user's name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Events.ExternalLoginDetails">
            <summary>
            Event class for external login events
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.ExternalLoginDetails.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.ExternalLoginDetails.ProviderId">
            <summary>
            Gets or sets the provider identifier.
            </summary>
            <value>
            The provider identifier.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Events.LocalLoginDetails">
            <summary>
            Event details for local login events
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.LocalLoginDetails.LoginUserName">
            <summary>
            Gets or sets the name of the login user.
            </summary>
            <value>
            The name of the login user.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Events.LoginDetails">
            <summary>
            Event details for login events
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.LoginDetails.SignInId">
            <summary>
            Gets or sets the sign in identifier.
            </summary>
            <value>
            The sign in identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.LoginDetails.SignInRequest">
            <summary>
            Gets or sets the sign in message.
            </summary>
            <value>
            The sign in message.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.LoginDetails.PartialLogin">
            <summary>
            Gets or sets a value indicating whether login was a partial login.
            </summary>
            <value>
              <c>true</c> if is a partial login; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Events.LogoutDetails">
            <summary>
            Event details for logout events
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.LogoutDetails.SignOutId">
            <summary>
            Gets or sets the sign out identifier.
            </summary>
            <value>
            The sign out identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.LogoutDetails.SignOutMessage">
            <summary>
            Gets or sets the sign out message.
            </summary>
            <value>
            The sign out message.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Events.Event`1">
            <summary>
            Models base class for events raised from IdentityServer.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Events.Event`1.#ctor(System.String,System.String,IdentityServer4.Core.Events.EventTypes,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Events.Event`1" /> class.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">category</exception>
        </member>
        <member name="M:IdentityServer4.Core.Events.Event`1.#ctor(System.String,System.String,IdentityServer4.Core.Events.EventTypes,System.Int32,`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Events.Event`1" /> class.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="id">The identifier.</param>
            <param name="details">The details.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:IdentityServer4.Core.Events.Event`1.#ctor(System.String,System.String,IdentityServer4.Core.Events.EventTypes,System.Int32,System.Func{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Events.Event`1" /> class.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="id">The identifier.</param>
            <param name="detailsFunc">The details function.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:IdentityServer4.Core.Events.Event`1.DetailsFunc">
            <summary>
            Gets or sets the details function.
            </summary>
            <value>
            The details function.
            </value>
        </member>
        <member name="M:IdentityServer4.Core.Events.Event`1.Prepare">
            <summary>
            Allows event to defer data initialization until the event will be raised.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.Event`1.Category">
            <summary>
            Gets or sets the event category. <see cref="T:IdentityServer4.Core.Events.EventConstants.Categories"/> for a list of the defined categories.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.Event`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.Event`1.EventType">
            <summary>
            Gets or sets the event type.
            </summary>
            <value>
            The type of the event.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.Event`1.Id">
            <summary>
            Gets or sets the event identifier. <see cref="T:IdentityServer4.Core.Events.EventConstants.Ids"/> for the list of the defined identifiers.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.Event`1.Message">
            <summary>
            Gets or sets the event message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.Event`1.Details">
            <summary>
            Gets or sets the event details.
            </summary>
            <value>
            The details.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.Event`1.Context">
            <summary>
            Gets or sets the event context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="F:IdentityServer4.Core.Events.EventConstants.Ids.AuthenticationEventsStart">
            Authentication related events
        </member>
        <member name="F:IdentityServer4.Core.Events.EventConstants.Ids.TokenServiceEventsStart">
            Token service related events
        </member>
        <member name="F:IdentityServer4.Core.Events.EventConstants.Ids.EndpointsEventsStart">
            Endpoints related events
        </member>
        <member name="F:IdentityServer4.Core.Events.EventConstants.Ids.InformationEventsStart">
            Information events
        </member>
        <member name="F:IdentityServer4.Core.Events.EventConstants.Ids.InternalErrorEventsStart">
            Error events
        </member>
        <member name="T:IdentityServer4.Core.Events.EventContext">
            <summary>
            Contextual information included with every event.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.EventContext.ActivityId">
            <summary>
            Gets or sets the per-request activity identifier.
            </summary>
            <value>
            The activity identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.EventContext.TimeStamp">
            <summary>
            Gets or sets the time stamp when the event was raised.
            </summary>
            <value>
            The time stamp.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.EventContext.ProcessId">
            <summary>
            Gets or sets the server process identifier.
            </summary>
            <value>
            The process identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.EventContext.MachineName">
            <summary>
            Gets or sets the name of the server machine.
            </summary>
            <value>
            The name of the machine.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.EventContext.RemoteIpAddress">
            <summary>
            Gets or sets the remote ip address of the current request.
            </summary>
            <value>
            The remote ip address.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.EventContext.SubjectId">
            <summary>
            Gets or sets the subject identifier of the current user (if available).
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Events.EventTypes">
            <summary>
            Indicates if the event is a success or fail event.
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Events.EventTypes.Success">
            <summary>
            Success event
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Events.EventTypes.Failure">
            <summary>
            Failure event
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Events.EventTypes.Information">
            <summary>
            Information event
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Events.EventTypes.Error">
            <summary>
            Error event
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Events.ClientPermissionsRevokedDetails">
            <summary>
            Details for client permissions revoked event
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.ClientPermissionsRevokedDetails.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.ClientPermissionsRevokedDetails.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.ClientPermissionsRevokedDetails.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Events.CspReportDetails">
            <summary>
            Event details for CSP report events
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.CspReportDetails.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.CspReportDetails.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.CspReportDetails.Report">
            <summary>
            Gets or sets the report.
            </summary>
            <value>
            The report.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Events.SigningCertificateDetail">
            <summary>
            Details class for signing certificate validation
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.SigningCertificateDetail.SigningCertificateName">
            <summary>
            Gets or sets the name of the signing certificate.
            </summary>
            <value>
            The name of the signing certificate.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.SigningCertificateDetail.SigningCertificateExpiration">
            <summary>
            Gets or sets the signing certificate expiration.
            </summary>
            <value>
            The signing certificate expiration.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Events.AccessTokenIssuedDetails">
            <summary>
            Details class for access token issued events
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.AccessTokenIssuedDetails.TokenType">
            <summary>
            Gets or sets the type of the access token.
            </summary>
            <value>
            The type of the token.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.AccessTokenIssuedDetails.ReferenceTokenHandle">
            <summary>
            Gets or sets the type of the reference token handle.
            </summary>
            <value>
            The type of the token.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Events.AuthorizationCodeDetails">
            <summary>
            Details class for authorization code issued events
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.AuthorizationCodeDetails.HandleId">
            <summary>
            Gets or sets the handle identifier.
            </summary>
            <value>
            The handle identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.AuthorizationCodeDetails.RedirectUri">
            <summary>
            Gets or sets the redirect URI.
            </summary>
            <value>
            The redirect URI.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Events.RefreshTokenDetails">
            <summary>
            Details class for refresh token issued events
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.RefreshTokenDetails.HandleId">
            <summary>
            Gets or sets the handle identifier.
            </summary>
            <value>
            The handle identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.RefreshTokenDetails.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Events.RefreshTokenRefreshDetails">
            <summary>
            Details class for refresh token refresh events
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.RefreshTokenRefreshDetails.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.RefreshTokenRefreshDetails.OldHandle">
            <summary>
            Gets or sets the old handle.
            </summary>
            <value>
            The old handle.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.RefreshTokenRefreshDetails.NewHandle">
            <summary>
            Gets or sets the new handle.
            </summary>
            <value>
            The new handle.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.RefreshTokenRefreshDetails.Lifetime">
            <summary>
            Gets or sets the lifetime.
            </summary>
            <value>
            The lifetime.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Events.TokenIssuedDetailsBase">
            <summary>
            Details base class for issued token events
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Events.TokenIssuedDetailsBase.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.TokenIssuedDetailsBase.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.TokenIssuedDetailsBase.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.TokenIssuedDetailsBase.Lifetime">
            <summary>
            Gets or sets the lifetime.
            </summary>
            <value>
            The lifetime.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Events.TokenIssuedDetailsBase.Claims">
            <summary>
            Gets or sets the claims.
            </summary>
            <value>
            The claims.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Extensions.ILocalizationServiceExtensions">
            <summary>
            Extension methods for <see cref="!:IdentityServer3.Core.Services.ILocalizationService"/>
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.ILocalizationServiceExtensions.GetMessage(IdentityServer4.Core.Services.ILocalizationService,System.String)">
            <summary>
            Gets a localized string for the message category.
            </summary>
            <param name="localization">The localization.</param>
            <param name="id">The identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">localization</exception>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.ILocalizationServiceExtensions.GetEvent(IdentityServer4.Core.Services.ILocalizationService,System.String)">
            <summary>
            Gets a localized string for the event category.
            </summary>
            <param name="localization">The localization.</param>
            <param name="id">The identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">localization</exception>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.ILocalizationServiceExtensions.GetScopeDisplayName(IdentityServer4.Core.Services.ILocalizationService,System.String)">
            <summary>
            Gets a localized scope display name.
            </summary>
            <param name="localization">The localization.</param>
            <param name="scope">The scope.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">localization</exception>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.ILocalizationServiceExtensions.GetScopeDescription(IdentityServer4.Core.Services.ILocalizationService,System.String)">
            <summary>
            Gets a localized scope description.
            </summary>
            <param name="localization">The localization.</param>
            <param name="scope">The scope.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">localization</exception>
        </member>
        <member name="T:IdentityServer4.Core.Extensions.PrincipalExtensions">
            <summary>
            Extension methods for <see cref="T:System.Security.Principal.IPrincipal"/> and <see cref="T:System.Security.Principal.IIdentity"/> .
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.PrincipalExtensions.GetAuthenticationTime(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the authentication time.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.PrincipalExtensions.GetAuthenticationTimeEpoch(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the authentication epoch time.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.PrincipalExtensions.GetAuthenticationTimeEpoch(System.Security.Principal.IIdentity)">
            <summary>
            Gets the authentication epoch time.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.PrincipalExtensions.GetSubjectId(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the subject identifier.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.PrincipalExtensions.GetSubjectId(System.Security.Principal.IIdentity)">
            <summary>
            Gets the subject identifier.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">sub claim is missing</exception>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.PrincipalExtensions.GetName(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the name.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.PrincipalExtensions.GetName(System.Security.Principal.IIdentity)">
            <summary>
            Gets the name.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">name claim is missing</exception>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.PrincipalExtensions.GetAuthenticationMethod(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the authentication method.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.PrincipalExtensions.GetAuthenticationMethods(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the authentication method claims.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.PrincipalExtensions.GetAuthenticationMethod(System.Security.Principal.IIdentity)">
            <summary>
            Gets the authentication method.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">amr claim is missing</exception>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.PrincipalExtensions.GetAuthenticationMethods(System.Security.Principal.IIdentity)">
            <summary>
            Gets the authentication method claims.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.PrincipalExtensions.GetIdentityProvider(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the identity provider.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Extensions.PrincipalExtensions.GetIdentityProvider(System.Security.Principal.IIdentity)">
            <summary>
            Gets the identity provider.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">idp claim is missing</exception>
        </member>
        <member name="T:IdentityServer4.Core.Models.HashExtensions">
            <summary>
            Extension methods for hashing strings
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Models.HashExtensions.Sha256(System.String)">
            <summary>
            Creates a SHA256 hash of the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>A hash</returns>
        </member>
        <member name="M:IdentityServer4.Core.Models.HashExtensions.Sha512(System.String)">
            <summary>
            Creates a SHA512 hash of the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>A hash</returns>
        </member>
        <member name="T:IdentityServer4.Core.Models.AuthenticateResult">
            <summary>
            AuthenticateResult models the result from the various authentication methods 
            on the <see cref="!:IdentityServer4.Core.Services.IUserService"/>
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthenticateResult.User">
            <summary>
            The user created from the authentication.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthenticateResult.ErrorMessage">
            <summary>
            The error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthenticateResult.PartialSignInRedirectPath">
            <summary>
            The partial sign in redirect path.
            </summary>
            <value>
            The partial sign in redirect path.
            </value>
        </member>
        <member name="M:IdentityServer4.Core.Models.AuthenticateResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.AuthenticateResult"/> class.
            </summary>
            <param name="errorMessage">The error message.</param>
            <exception cref="T:System.ArgumentNullException">errorMessage</exception>
        </member>
        <member name="M:IdentityServer4.Core.Models.AuthenticateResult.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.AuthenticateResult"/> class. This
            version of the constructor indicates a full login.
            </summary>
            <param name="subject">The subject claim used to uniquely identifier the user.</param>
            <param name="name">The name claim used as the display name.</param>
            <param name="claims">Additional claims that will be maintained in the principal.</param>
            <param name="identityProvider">The identity provider. This should used when an external 
            identity provider is used and will typically match the <c>AuthenticationType</c> as configured
            on the Katana authentication middleware.</param>
            <param name="authenticationMethod">The authentication method. This should be used when 
            local authentication is performed as some other means other than password has been 
            used to authenticate the user (e.g. '2fa' for two-factor, or 'certificate' for client 
            certificates).
            </param>
        </member>
        <member name="M:IdentityServer4.Core.Models.AuthenticateResult.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.AuthenticateResult" /> class. This
            version of the constructor indicates a partial login (with a redirect) with
            knowledge of the subject claim.
            </summary>
            <param name="redirectPath">The redirect path. This should be relative to the 
            current web server. The <c>"~/"</c> prefix is supported to allow application-relative
            paths to be used (e.g. "~/path").
            </param>
            <param name="subject">The subject claim used to uniquely identifier the user.</param>
            <param name="name">The name claim used as the display name.</param>
            <param name="claims">Additional claims that will be maintained in the principal.</param>
            <param name="identityProvider">The identity provider. This should used when an external 
            identity provider is used and will typically match the <c>AuthenticationType</c> as configured
            on the Katana authentication middleware.</param>
            <param name="authenticationMethod">The authentication method. This should be used when
            local authentication is performed as some other means other than password has been
            used to authenticate the user (e.g. '2fa' for two-factor, or 'certificate' for client</param>
            <exception cref="T:System.ArgumentNullException">redirectPath</exception>
            <exception cref="T:System.ArgumentException">redirectPath must start with / or ~/</exception>
        </member>
        <member name="M:IdentityServer4.Core.Models.AuthenticateResult.#ctor(System.String,IdentityServer4.Core.Models.ExternalIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.AuthenticateResult" /> class. This
            version of the constructor indicates a partial login (with a redirect) without
            knowledge of the subject claim.
            </summary>
            <param name="redirectPath">The redirect path. This should be relative to the 
            current web server. The <c>"~/"</c> prefix is supported to allow application-relative
            paths to be used (e.g. "~/path").
            </param>
            <param name="externalId">The external identifier that represents the external identity
            provider the partial login is created from. This will be re-presented to correlate the request
            when the user resumes from the redirect.</param>
            <exception cref="T:System.ArgumentNullException">
            redirectPath
            or
            externalId
            </exception>
            <exception cref="T:System.ArgumentException">redirectPath must start with / or ~/</exception>
        </member>
        <member name="M:IdentityServer4.Core.Models.AuthenticateResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.AuthenticateResult" /> class. This
            version of the constructor indicates a partial login (with a redirect) without
            knowledge of the subject claim.
            </summary>
            <param name="redirectPath">The redirect path. This should be relative to the
            current web server. The <c>"~/"</c> prefix is supported to allow application-relative
            paths to be used (e.g. "~/path").</param>
            <param name="claims">Additional claims that will be maintained in the principal.</param>
            <exception cref="T:System.ArgumentNullException">redirectPath</exception>
            <exception cref="T:System.ArgumentException">redirectPath must start with / or ~/</exception>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthenticateResult.IsError">
            <summary>
            Gets a value indicating whether the authentication resulted in an error.
            </summary>
            <value>
              <c>true</c> if this instance is error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthenticateResult.IsPartialSignIn">
            <summary>
            Gets a value indicating whether the authentication resulted in a partial sign in.
            </summary>
            <value>
            <c>true</c> if this instance is partial sign in; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthenticateResult.HasSubject">
            <summary>
            Gets a value indicating whether the authentication result has a subject claim.
            </summary>
            <value>
            <c>true</c> if this instance has a subject claim; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.AuthorizationCode">
            <summary>
            Modles an authorization code.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthorizationCode.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthorizationCode.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthorizationCode.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthorizationCode.IsOpenId">
            <summary>
            Gets or sets a value indicating whether this code is an OpenID Connect code.
            </summary>
            <value>
            <c>true</c> if this instance is open identifier; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthorizationCode.RequestedScopes">
            <summary>
            Gets or sets the requested scopes.
            </summary>
            <value>
            The requested scopes.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthorizationCode.RedirectUri">
            <summary>
            Gets or sets the redirect URI.
            </summary>
            <value>
            The redirect URI.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthorizationCode.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthorizationCode.WasConsentShown">
            <summary>
            Gets or sets a value indicating whether consent was shown.
            </summary>
            <value>
              <c>true</c> if consent was shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthorizationCode.SessionId">
            <summary>
            Gets or sets the session identifier.
            </summary>
            <value>
            The session identifier.
            </value>
        </member>
        <member name="M:IdentityServer4.Core.Models.AuthorizationCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.AuthorizationCode"/> class.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthorizationCode.SubjectId">
            <summary>
            Gets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthorizationCode.ClientId">
            <summary>
            Gets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.AuthorizationCode.Scopes">
            <summary>
            Gets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.Client">
            <summary>
            Models an OpenID Connect or OAuth2 client
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.Enabled">
            <summary>
            Specifies if client is enabled (defaults to true)
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.ClientId">
            <summary>
            Unique ID of the client
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.ClientSecrets">
            <summary>
            Client secrets - only relevant for flows that require a secret
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.ClientName">
            <summary>
            Client display name (used for logging and consent screen)
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.ClientUri">
            <summary>
            URI to further information about client (used on consent screen)
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.LogoUri">
            <summary>
            URI to client logo (used on consent screen)
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.RequireConsent">
            <summary>
            Specifies whether a consent screen is required (defaults to true)
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.AllowRememberConsent">
            <summary>
            Specifies whether user can choose to store consent decisions (defaults to true)
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.Flow">
            <summary>
            Specifies allowed flow for client (either AuthorizationCode, Implicit, Hybrid, ResourceOwner, ClientCredentials or Custom). Defaults to Implicit.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.AllowClientCredentialsOnly">
            <summary>
            Gets or sets a value indicating whether this client is allowed to request token using client credentials only.
            This is e.g. useful when you want a client to be able to use both a user-centric flow like implicit and additionally client credentials flow
            </summary>
            <value>
            <c>true</c> if client credentials flow is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.RedirectUris">
            <summary>
            Specifies allowed URIs to return tokens or authorization codes to
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.PostLogoutRedirectUris">
            <summary>
            Specifies allowed URIs to redirect to after logout
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.LogoutUri">
            <summary>
            Specifies logout URI at client for HTTP based logout.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.LogoutSessionRequired">
            <summary>
            Specifies is the user's session id should be sent to the LogoutUri. Defaults to true.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.AllowAccessToAllScopes">
            <summary>
            Gets or sets a value indicating whether the client has access to all scopes. Defaults to false.
            You can set the allowed scopes via the AllowedScopes list.
            </summary>
            <value>
            <c>true</c> if client has access to all scopes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.AllowedScopes">
            <summary>
            Specifies the scopes that the client is allowed to request. If empty, the client can't access any scope
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.IdentityTokenLifetime">
            <summary>
            Lifetime of identity token in seconds (defaults to 300 seconds / 5 minutes)
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.AccessTokenLifetime">
            <summary>
            Lifetime of access token in seconds (defaults to 3600 seconds / 1 hour)
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.AuthorizationCodeLifetime">
            <summary>
            Lifetime of authorization code in seconds (defaults to 300 seconds / 5 minutes)
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.AbsoluteRefreshTokenLifetime">
            <summary>
            Maximum lifetime of a refresh token in seconds. Defaults to 2592000 seconds / 30 days
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.SlidingRefreshTokenLifetime">
            <summary>
            Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.RefreshTokenUsage">
            <summary>
            ReUse: the refresh token handle will stay the same when refreshing tokens
            OneTime: the refresh token handle will be updated when refreshing tokens
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.UpdateAccessTokenClaimsOnRefresh">
            <summary>
            Gets or sets a value indicating whether the access token (and its claims) should be updated on a refresh token request.
            </summary>
            <value>
            <c>true</c> if the token should be updated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.RefreshTokenExpiration">
            <summary>
            Absolute: the refresh token will expire on a fixed point in time (specified by the AbsoluteRefreshTokenLifetime)
            Sliding: when refreshing the token, the lifetime of the refresh token will be renewed (by the amount specified in SlidingRefreshTokenLifetime). The lifetime will not exceed AbsoluteRefreshTokenLifetime.
            </summary>        
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.AccessTokenType">
            <summary>
            Specifies whether the access token is a reference token or a self contained JWT token (defaults to Jwt).
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.EnableLocalLogin">
            <summary>
            Gets or sets a value indicating whether the local login is allowed for this client. Defaults to <c>true</c>.
            </summary>
            <value>
              <c>true</c> if local logins are enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.IdentityProviderRestrictions">
            <summary>
            Specifies which external IdPs can be used with this client (if list is empty all IdPs are allowed). Defaults to empty.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.IncludeJwtId">
            <summary>
            Gets or sets a value indicating whether JWT access tokens should include an identifier
            </summary>
            <value>
            <c>true</c> to add an id; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.Claims">
            <summary>
            Allows settings claims for the client (will be included in the access token).
            </summary>
            <value>
            The claims.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.AlwaysSendClientClaims">
            <summary>
            Gets or sets a value indicating whether client claims should be always included in the access tokens - or only for client credentials flow.
            </summary>
            <value>
            <c>true</c> if claims should always be sent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.PrefixClientClaims">
            <summary>
            Gets or sets a value indicating whether all client claims should be prefixed.
            </summary>
            <value>
            <c>true</c> if client claims should be prefixed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.AllowAccessToAllCustomGrantTypes">
            <summary>
            Gets or sets a value indicating whether the client has access to all custom grant types. Defaults to false.
            You can set the allowed custom grant types via the AllowedCustomGrantTypes list.
            </summary>
            <value>
            <c>true</c> if client has access to all custom grant types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.AllowedCustomGrantTypes">
            <summary>
            Gets or sets a list of allowed custom grant types when Flow is set to Custom.
            </summary>
            <value>
            The allowed custom grant types.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.AllowedCorsOrigins">
            <summary>
            Gets or sets the allowed CORS origins for JavaScript clients.
            </summary>
            <value>
            The allowed CORS origins.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Client.AllowPromptNone">
            <summary>
            Gets or sets if client is allowed to use prompt=none OIDC parameter value.
            </summary>
            <value>
            true if client can use prompt=none, false otherwise.
            </value>
        </member>
        <member name="M:IdentityServer4.Core.Models.Client.#ctor">
            <summary>
            Creates a Client with default values
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Models.Consent">
            <summary>
            Represents the permissions (in terms of scopes) granted to a client by a subject
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Consent.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Consent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Consent.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.ScopeType">
            <summary>
            OpenID Connect scope types.
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.ScopeType.Identity">
            <summary>
            Scope representing identity data (e.g. profile or email)
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.ScopeType.Resource">
            <summary>
            Scope representing a resource (e.g. a web api)
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Models.Flows">
            <summary>
            OpenID Connect flows.
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.Flows.AuthorizationCode">
            <summary>
            authorization code flow
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.Flows.Implicit">
            <summary>
            implicit flow
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.Flows.Hybrid">
            <summary>
            hybrid flow
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.Flows.ClientCredentials">
            <summary>
            client credentials flow
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.Flows.ResourceOwner">
            <summary>
            resource owner password credential flow
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.Flows.Custom">
            <summary>
            custom grant
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Models.SubjectTypes">
            <summary>
            OpenID Connect subject types.
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.SubjectTypes.Global">
            <summary>
            global - use the native subject id
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.SubjectTypes.Ppid">
            <summary>
            ppid - scope the subject id to the client
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Models.AccessTokenType">
            <summary>
            Access token types.
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.AccessTokenType.Jwt">
            <summary>
            Self-contained Json Web Token
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.AccessTokenType.Reference">
            <summary>
            Reference token
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Models.TokenUsage">
            <summary>
            Token usage types.
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.TokenUsage.ReUse">
            <summary>
            Re-use the refresh token handle
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.TokenUsage.OneTimeOnly">
            <summary>
            Issue a new refresh token handle every time
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Models.TokenExpiration">
            <summary>
            Token expiration types.
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.TokenExpiration.Sliding">
            <summary>
            Sliding token expiration
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Models.TokenExpiration.Absolute">
            <summary>
            Absolute token expiration
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Models.ExternalIdentity">
            <summary>
            Models the identity of a user authenticating from an external identity provider.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.ExternalIdentity.Provider">
            <summary>
            Identifier of the external identity provider.
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ExternalIdentity.ProviderId">
            <summary>
            User's unique identifier provided by the external identity provider.
            </summary>
            <value>
            The provider identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ExternalIdentity.Claims">
            <summary>
            Claims supplied for the user from the external identity provider.
            </summary>
            <value>
            The claims.
            </value>
        </member>
        <member name="M:IdentityServer4.Core.Models.ExternalIdentity.FromClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Creates an ExternalIdentity and determines the Provider and ProviderId from the list of claims.
            </summary>
            <param name="claims">The claims.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">claims</exception>
        </member>
        <member name="T:IdentityServer4.Core.Models.ITokenMetadata">
            <summary>
            Models the permissions contained within a token.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.ITokenMetadata.SubjectId">
            <summary>
            Gets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ITokenMetadata.ClientId">
            <summary>
            Gets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ITokenMetadata.Scopes">
            <summary>
            Gets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.ParsedSecret">
            <summary>
            Represents a secret extracted from the OWIN environment
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.ParsedSecret.Id">
            <summary>
            Gets or sets the identifier associated with this secret
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ParsedSecret.Credential">
            <summary>
            Gets or sets the credential to verify the secret
            </summary>
            <value>
            The credential.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ParsedSecret.Type">
            <summary>
            Gets or sets the type of the secret
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.RefreshToken">
            <summary>
            Models a refresh token.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Models.RefreshToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.RefreshToken"/> class.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.RefreshToken.ClientId">
            <summary>
            Gets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.RefreshToken.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.RefreshToken.LifeTime">
            <summary>
            Gets or sets the life time.
            </summary>
            <value>
            The life time.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.RefreshToken.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
            <value>
            The access token.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.RefreshToken.Subject">
            <summary>
            Gets or sets the original subject that requiested the token.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.RefreshToken.Version">
            <summary>
            Gets or sets the version number.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.RefreshToken.SubjectId">
            <summary>
            Gets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.RefreshToken.Scopes">
            <summary>
            Gets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.Scope">
            <summary>
            Models are resource (either identity resource or web api resource)
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Scope.Enabled">
            <summary>
            Indicates if scope is enabled and can be requested. Defaults to true.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Scope.Name">
            <summary>
            Name of the scope. This is the value a client will use to request the scope.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Scope.DisplayName">
            <summary>
            Display name. This value will be used e.g. on the consent screen.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Scope.Description">
            <summary>
            Description. This value will be used e.g. on the consent screen.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Scope.Required">
            <summary>
            Specifies whether the user can de-select the scope on the consent screen. Defaults to false.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Scope.Emphasize">
            <summary>
            Specifies whether the consent screen will emphasize this scope. Use this setting for sensitive or important scopes. Defaults to false.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Scope.Type">
            <summary>
            Specifies whether this scope is about identity information from the userinfo endpoint, or a resource (e.g. a Web API). Defaults to Resource.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Scope.Claims">
            <summary>
            List of user claims that should be included in the identity (identity scope) or access token (resource scope). 
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Scope.IncludeAllClaimsForUser">
            <summary>
            If enabled, all claims for the user will be included in the token. Defaults to false.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Scope.ClaimsRule">
            <summary>
            Rule for determining which claims should be included in the token (this is implementation specific)
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Scope.ShowInDiscoveryDocument">
            <summary>
            Specifies whether this scope is shown in the discovery document. Defaults to true.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Scope.ScopeSecrets">
            <summary>
            Gets or sets the scope secrets.
            </summary>
            <value>
            The scope secrets.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Scope.AllowUnrestrictedIntrospection">
            <summary>
            Specifies whether this scope is allowed to see other scopes when using the introspection endpoint
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Models.Scope.#ctor">
            <summary>
            Creates a Scope with default values
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Models.ScopeClaim">
            <summary>
            Models a claim that should be emitted in a token
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.ScopeClaim.Name">
            <summary>
            Name of the claim
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.ScopeClaim.Description">
            <summary>
            Description of the claim
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.ScopeClaim.AlwaysIncludeInIdToken">
            <summary>
            Specifies whether this claim should always be present in the identity token (even if an access token has been requested as well). Applies to identity scopes only. Defaults to false.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Models.ScopeClaim.#ctor">
            <summary>
            Creates an empty ScopeClaim
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Models.ScopeClaim.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a ScopeClaim with parameters
            </summary>
            <param name="name">Name of the claim</param>
            <param name="alwaysInclude">Specifies whether this claim should always be present in the identity token (even if an access token has been requested as well). Applies to identity scopes only.</param>
        </member>
        <member name="T:IdentityServer4.Core.Models.Secret">
            <summary>
            Models a client secret with identifier and expiration
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Secret.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Secret.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Secret.Expiration">
            <summary>
            Gets or sets the expiration.
            </summary>
            <value>
            The expiration.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Secret.Type">
            <summary>
            Gets or sets the type of the client secret.
            </summary>
            <value>
            The type of the client secret.
            </value>
        </member>
        <member name="M:IdentityServer4.Core.Models.Secret.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.Secret"/> class.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Models.Secret.#ctor(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.Secret"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="expiration">The expiration.</param>
        </member>
        <member name="M:IdentityServer4.Core.Models.Secret.#ctor(System.String,System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.Secret" /> class.
            </summary>
            <param name="value">The value.</param>
            <param name="description">The description.</param>
            <param name="expiration">The expiration.</param>
        </member>
        <member name="T:IdentityServer4.Core.Models.StandardScopes">
            <summary>
            Convenience class that defines standard identity scopes.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.All">
            <summary>
            All identity scopes.
            </summary>
            <value>
            All.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.AllAlwaysInclude">
            <summary>
            All identity scopes (always include claims in token).
            </summary>
            <value>
            All always include.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.OpenId">
            <summary>
            Gets the "openid" scope.
            </summary>
            <value>
            The open identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.Profile">
            <summary>
            Gets the "profile" scope.
            </summary>
            <value>
            The profile.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.ProfileAlwaysInclude">
            <summary>
            Gets the "profile" scope (always include claims in token).
            </summary>
            <value>
            The profile always include.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.Email">
            <summary>
            Gets the "email" scope.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.EmailAlwaysInclude">
            <summary>
            Gets the "email" scope (always include claims in token).
            </summary>
            <value>
            The email always include.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.Phone">
            <summary>
            Gets the "phone" scope.
            </summary>
            <value>
            The phone.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.PhoneAlwaysInclude">
            <summary>
            Gets the "phone" scope (always include claims in token).
            </summary>
            <value>
            The phone always include.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.Address">
            <summary>
            Gets the "address" scope.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.AddressAlwaysInclude">
            <summary>
            Gets the "address" scope (always include claims in token).
            </summary>
            <value>
            The address always include.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.AllClaims">
            <summary>
            Gets the "all_claims" scope.
            </summary>
            <value>
            All claims.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.Roles">
            <summary>
            Gets the "roles" scope.
            </summary>
            <value>
            The roles.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.RolesAlwaysInclude">
            <summary>
            Gets the "roles" scope (always include claims in token).
            </summary>
            <value>
            The roles always include.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.StandardScopes.OfflineAccess">
            <summary>
            Gets the "offline_access" scope.
            </summary>
            <value>
            The offline access.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.Token">
            <summary>
            Models a token.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Token.Audience">
            <summary>
            Gets or sets the audience.
            </summary>
            <value>
            The audience.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Token.Issuer">
            <summary>
            Gets or sets the issuer.
            </summary>
            <value>
            The issuer.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Token.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Token.Lifetime">
            <summary>
            Gets or sets the lifetime.
            </summary>
            <value>
            The lifetime.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Token.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Token.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Token.Claims">
            <summary>
            Gets or sets the claims.
            </summary>
            <value>
            The claims.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Token.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="M:IdentityServer4.Core.Models.Token.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.Token"/> class.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Models.Token.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.Token"/> class.
            </summary>
            <param name="tokenType">Type of the token.</param>
        </member>
        <member name="P:IdentityServer4.Core.Models.Token.SubjectId">
            <summary>
            Gets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Token.ClientId">
            <summary>
            Gets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.Token.Scopes">
            <summary>
            Gets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.TokenCreationRequest">
            <summary>
            Models the data to create a token from a validated request.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.TokenCreationRequest.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.TokenCreationRequest.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.TokenCreationRequest.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.TokenCreationRequest.ValidatedRequest">
            <summary>
            Gets or sets the validated request.
            </summary>
            <value>
            The validated request.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.TokenCreationRequest.IncludeAllIdentityClaims">
            <summary>
            Gets or sets a value indicating whether [include all identity claims].
            </summary>
            <value>
            <c>true</c> if [include all identity claims]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.TokenCreationRequest.AccessTokenToHash">
            <summary>
            Gets or sets the access token to hash.
            </summary>
            <value>
            The access token to hash.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.TokenCreationRequest.AuthorizationCodeToHash">
            <summary>
            Gets or sets the authorization code to hash.
            </summary>
            <value>
            The authorization code to hash.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.TokenCreationRequest.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.ExternalAuthenticationContext">
            <summary>
            Class describing the context of the external authentication
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.ExternalAuthenticationContext.ExternalIdentity">
            <summary>
            Gets or sets the external identity.
            </summary>
            <value>
            The external identity.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ExternalAuthenticationContext.SignInRequest">
            <summary>
            Gets or sets the sign in message.
            </summary>
            <value>
            The sign in message.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ExternalAuthenticationContext.AuthenticateResult">
            <summary>
            Gets or sets the authenticate result.
            </summary>
            <value>
            The authenticate result.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.IsActiveContext">
            <summary>
            Context describing the is-active check
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Models.IsActiveContext.#ctor(System.Security.Claims.ClaimsPrincipal,IdentityServer4.Core.Models.Client)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.IsActiveContext"/> class.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.IsActiveContext.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.IsActiveContext.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.IsActiveContext.IsActive">
            <summary>
            Gets or sets a value indicating whether the subject is active and can recieve tokens.
            </summary>
            <value>
              <c>true</c> if the subject is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.LocalAuthenticationContext">
            <summary>
            Class describing the context of the local authentication
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.LocalAuthenticationContext.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.LocalAuthenticationContext.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.LocalAuthenticationContext.SignInRequest">
            <summary>
            Gets or sets the sign in message.
            </summary>
            <value>
            The sign in message.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.LocalAuthenticationContext.AuthenticateResult">
            <summary>
            Gets or sets the authenticate result.
            </summary>
            <value>
            The authenticate result.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.PostAuthenticationContext">
            <summary>
            Class describing the context of the post-authentication stage
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.PostAuthenticationContext.SignInRequest">
            <summary>
            Gets or sets the sign in message.
            </summary>
            <value>
            The sign in message.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.PostAuthenticationContext.AuthenticateResult">
            <summary>
            Gets or sets the authenticate result.
            </summary>
            <value>
            The authenticate result.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.PreAuthenticationContext">
            <summary>
            Class describing the context of the pre-authentication stage
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.PreAuthenticationContext.SignInRequest">
            <summary>
            Gets or sets the sign in message.
            </summary>
            <value>
            The sign in message.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.PreAuthenticationContext.AuthenticateResult">
            <summary>
            Gets or sets the authenticate result.
            </summary>
            <value>
            The authenticate result.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.ProfileDataRequestContext">
            <summary>
            Class describing the profile data request
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Models.ProfileDataRequestContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.ProfileDataRequestContext"/> class.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.ProfileDataRequestContext.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ProfileDataRequestContext.AllClaimsRequested">
            <summary>
            Gets or sets a value indicating whether all claims are requested.
            </summary>
            <value>
              <c>true</c> if all claims are requested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ProfileDataRequestContext.RequestedClaimTypes">
            <summary>
            Gets or sets the requested claim types.
            </summary>
            <value>
            The requested claim types.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ProfileDataRequestContext.Client">
            <summary>
            Gets or sets the client id.
            </summary>
            <value>
            The client id.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ProfileDataRequestContext.Caller">
            <summary>
            Gets or sets the caller.
            </summary>
            <value>
            The caller.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ProfileDataRequestContext.IssuedClaims">
            <summary>
            Gets or sets the issued claims.
            </summary>
            <value>
            The issued claims.
            </value>
        </member>
        <member name="M:IdentityServer4.Core.Models.ProfileDataRequestContext.#ctor(System.Security.Claims.ClaimsPrincipal,IdentityServer4.Core.Models.Client,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.ProfileDataRequestContext" /> class.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <param name="caller">The caller.</param>
            <param name="requestedClaimTypes">The requested claim types.</param>
        </member>
        <member name="T:IdentityServer4.Core.Models.SignOutContext">
            <summary>
            Class describing the context of the sign-out
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.SignOutContext.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.SignOutContext.ClientId">
            <summary>
            Gets or sets the client id.
            </summary>
            <value>
            The client id.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.ClientReturnInfo">
            <summary>
            Models the information and mechanisms for allowing a user to return to a client application.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.ClientReturnInfo.ClientId">
            <summary>
            The identifier for the client application the user will be sent to.
            </summary>
            <value>
            The Client Id.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ClientReturnInfo.Uri">
            <summary>
            The Uri of the client where the user can be returned.
            </summary>
            <value>
            The return Uri.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ClientReturnInfo.PostBody">
            <summary>
            The HTML-encoded values for the POST body to be used if IsPost is true. 
            </summary>
            <value>
            The POST body.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ClientReturnInfo.IsPost">
            <summary>
            Value that indicates if the return must be performed via a POST, rather than a redirect with GET.
            </summary>
            <value>
            The IsPost flag.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.ConsentRequest">
            <summary>
            Models the data submitted from the conset page.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.ConsentRequest.ClientId">
            <summary>
            The client identifier that initiated the request.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ConsentRequest.DisplayMode">
            <summary>
            The display mode passed from the authorization request.
            </summary>
            <value>
            The display mode.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ConsentRequest.UiLocales">
            <summary>
            The UI locales passed from the authorization request.
            </summary>
            <value>
            The UI locales.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ConsentRequest.ScopesRequested">
            <summary>
            Gets or sets the scopes requested.
            </summary>
            <value>
            The scopes requested.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.ConsentResponse">
            <summary>
            Models the user's response to the consent screen.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.ConsentResponse.Granted">
            <summary>
            Gets if consent was granted.
            </summary>
            <value>
              <c>true</c> if consent was granted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ConsentResponse.ScopesConsented">
            <summary>
            Gets or sets the scopes consented to.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ConsentResponse.RememberConsent">
            <summary>
            Gets or sets a value indicating whether the user wishes the consent to be remembered.
            </summary>
            <value>
              <c>true</c> if consent is to be remembered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.ErrorMessage">
            <summary>
            Models the data for the error page.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.ErrorMessage.DisplayMode">
            <summary>
            The display mode passed from the authorization request.
            </summary>
            <value>
            The display mode.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ErrorMessage.UiLocales">
            <summary>
            The UI locales passed from the authorization request.
            </summary>
            <value>
            The UI locales.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ErrorMessage.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ErrorMessage.ErrorDescription">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ErrorMessage.RequestId">
            <summary>
            The per-request identifier. This can be used to display to the end user and can be used in diagnostics.
            </summary>
            <value>
            The request identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.ErrorMessage.ReturnInfo">
            <summary>
            Information about the client where a user is allowed to navigate after the error page is displayed.
            </summary>
            <value>
            The return information.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.Message`1">
            <summary>
            Base class for data that needs to be written out as cookies.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Models.Message`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="!:Message"/> class.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.Message`1.Created">
            <summary>
            Gets or sets the UTC ticks the <see cref="!:Message"/> was created.
            </summary>
            <value>
            The created UTC ticks.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.SignedOutMessage">
            <summary>
            Models the request from a client to sign the user out.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.SignedOutMessage.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.SignInRequest">
            <summary>
            Represents contextual information about a login request.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.SignInRequest.ClientId">
            <summary>
            The client identifier that initiated the request.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.SignInRequest.DisplayMode">
            <summary>
            The display mode passed from the authorization request.
            </summary>
            <value>
            The display mode.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.SignInRequest.UiLocales">
            <summary>
            The UI locales passed from the authorization request.
            </summary>
            <value>
            The UI locales.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.SignInRequest.IdP">
            <summary>
            The external identity provider requested. This is used to bypass home realm 
            discovery (HRD). This is provided via the <c>"idp:"</c> prefix to the <c>acr</c> 
            parameter on the authorize request.
            </summary>
            <value>
            The external identity provider identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.SignInRequest.Tenant">
            <summary>
            The tenant requested. This is provided via the <c>"tenant:"</c> prefix to 
            the <c>acr</c> parameter on the authorize request.
            </summary>
            <value>
            The tenant.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.SignInRequest.LoginHint">
            <summary>
            The expected username the user will use to login. This is requested from the client 
            via the <c>login_hint</c> parameter on the authorize request.
            </summary>
            <value>
            The LoginHint.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Models.SignInRequest.AcrValues">
            <summary>
            The acr values passed from the authorization request.
            </summary>
            <value>
            The acr values.
            </value>
        </member>
        <member name="M:IdentityServer4.Core.Models.SignInRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Models.SignInRequest"/> class.
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Models.SignInResponse">
            <summary>
            Represents contextual information about a login request.
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Models.SignOutRequest">
            <summary>
            Models the request from a client to sign the user out.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Models.SignOutRequest.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Models.SignOutResponse">
            <summary>
            Models the request from a client to sign the user out.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Hosting.IdentityServerContextExtensions.GetBasePath(IdentityServer4.Core.Hosting.IdentityServerContext)">
            <summary>
            Gets the base path of IdentityServer. Can be used inside of Katana <c>Map</c>ped middleware.
            </summary>
            <param name="env">The OWIN environment.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Hosting.IdentityServerContextExtensions.GetIdentityServerBaseUrl(IdentityServer4.Core.Hosting.IdentityServerContext)">
            <summary>
            Gets the public base URL for IdentityServer.
            </summary>
            <param name="env">The OWIN environment.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Logging.LogSerializer">
            <summary>
            Helper to JSON serialize object data for logging.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Logging.LogSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="logObject">The object.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.IAuthorizationCodeStore">
            <summary>
            Abstraction for storing authorization codes
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Services.ICache`1">
            <summary>
            Abstract interface to model data caching
            </summary>
            <typeparam name="T">The data type to be cached</typeparam>
        </member>
        <member name="M:IdentityServer4.Core.Services.ICache`1.GetAsync(System.String)">
            <summary>
            Gets the cached data based upon a key index.
            </summary>
            <param name="key">The key.</param>
            <returns>The cached item, or <c>null</c> if no item matches the key.</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.ICache`1.SetAsync(System.String,`0)">
            <summary>
            Caches the data based upon a key
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.IClaimsProvider">
            <summary>
            The claims provider is responsible for determining which claims to include in tokens
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.IClaimsProvider.GetIdentityTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,IdentityServer4.Core.Models.Client,System.Collections.Generic.IEnumerable{IdentityServer4.Core.Models.Scope},System.Boolean,IdentityServer4.Core.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an identity token
            </summary>
            <param name="subject">The subject</param>
            <param name="client">The client</param>
            <param name="scopes">The requested scopes</param>
            <param name="includeAllIdentityClaims">Specifies if all claims should be included in the token, or if the userinfo endpoint can be used to retrieve them</param>
            <param name="request">The raw request</param>
            <returns>Claims for the identity token</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.IClaimsProvider.GetAccessTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,IdentityServer4.Core.Models.Client,System.Collections.Generic.IEnumerable{IdentityServer4.Core.Models.Scope},IdentityServer4.Core.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an access token.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <param name="scopes">The requested scopes.</param>
            <param name="request">The raw request.</param>
            <returns>Claims for the access token</returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.IClientStore">
            <summary>
            Retrieval of client configuration
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.IClientStore.FindClientByIdAsync(System.String)">
            <summary>
            Finds a client by id
            </summary>
            <param name="clientId">The client id</param>
            <returns>The client</returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.IConsentService">
            <summary>
            Service to retrieve and update consent.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.IConsentService.RequiresConsentAsync(IdentityServer4.Core.Models.Client,System.Security.Claims.ClaimsPrincipal,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks if consent is required.
            </summary>
            <param name="client">The client.</param>
            <param name="subject">The user.</param>
            <param name="scopes">The scopes.</param>
            <returns>Boolean if consent is required.</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.IConsentService.UpdateConsentAsync(IdentityServer4.Core.Models.Client,System.Security.Claims.ClaimsPrincipal,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates the consent.
            </summary>
            <param name="client">The client.</param>
            <param name="subject">The subject.</param>
            <param name="scopes">The scopes.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.IConsentStore">
            <summary>
            Models persisting user consent
            </summary>
            TODO: does this really need to be IPermissionsStore?
        </member>
        <member name="M:IdentityServer4.Core.Services.IConsentStore.LoadAsync(System.String,System.String)">
            <summary>
            Loads the subject's prior consent for the client.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <returns>The persisted consent.</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.IConsentStore.UpdateAsync(IdentityServer4.Core.Models.Consent)">
            <summary>
            Persists the subject's consent.
            </summary>
            <param name="consent">The consent.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.ICorsPolicyService">
            <summary>
            Service that determines if CORS is allowed.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.ICorsPolicyService.IsOriginAllowedAsync(System.String)">
            <summary>
            Determines whether origin is allowed.
            </summary>
            <param name="origin">The origin.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.IDependencyResolver">
            <summary>
            Allows resolving dependencies from the dependency injection system.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.IDependencyResolver.Resolve``1(System.String)">
            <summary>
            Resolves the dependency based upon the type. If name is provided then the dependency is also resolved by name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <returns>The dependency.</returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.IEventService">
            <summary>
            Models a recipient of notification of events
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.IEventService.RaiseAsync``1(IdentityServer4.Core.Events.Event{``0})">
            <summary>
            Raises the specified event.
            </summary>
            <param name="evt">The event.</param>
        </member>
        <member name="T:IdentityServer4.Core.Services.IExternalClaimsFilter">
            <summary>
            Models a mechanism for claims transformation for claims provided from external identity providers.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.IExternalClaimsFilter.Filter(System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Filters the specified claims from an external identity provider.
            </summary>
            <param name="provider">The identifier for the external identity provider.</param>
            <param name="claims">The incoming claims.</param>
            <returns>The transformed claims.</returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.ILocalizationService">
            <summary>
            Models loading localizable strings.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.ILocalizationService.GetString(System.String,System.String)">
            <summary>
            Gets a localized string based upon the string's category and identifier.
            </summary>
            <param name="category">The category.</param>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.IPermissionsStore">
            <summary>
            Models storage of a subject's permissions for clients. 
            Provides an abstraction on the type of permission (codes, refresh tokens, access tokens, and consent).
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.IPermissionsStore.LoadAllAsync(System.String)">
            <summary>
            Loads all permissions the subject has granted to all clients.
            </summary>
            <param name="subject">The subject.</param>
            <returns>The permissions.</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.IPermissionsStore.RevokeAsync(System.String,System.String)">
            <summary>
            Revokes all permissions the subject has given to a client.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.IProfileService">
            <summary>
            This interface allows IdentityServer to connect to your user and profile store.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.IProfileService.GetProfileDataAsync(IdentityServer4.Core.Models.ProfileDataRequestContext)">
            <summary>
            This method is called whenever claims about the user are requested (e.g. during token creation or via the userinfo endpoint)
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.IProfileService.IsActiveAsync(IdentityServer4.Core.Models.IsActiveContext)">
            <summary>
            This method gets called whenever identity server needs to determine if the user is valid or active (e.g. if the user's account has been deactivated since they logged in).
            (e.g. during token issuance or validation).
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.IRefreshTokenService">
            <summary>
            Implements refresh token creation and validation
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.IRefreshTokenService.CreateRefreshTokenAsync(System.Security.Claims.ClaimsPrincipal,IdentityServer4.Core.Models.Token,IdentityServer4.Core.Models.Client)">
            <summary>
            Creates the refresh token.
            </summary>
            <param name="subject">The subject.</param>
            <param name="accessToken">The access token.</param>
            <param name="client">The client.</param>
            <returns>
            The refresh token handle
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.IRefreshTokenService.UpdateRefreshTokenAsync(System.String,IdentityServer4.Core.Models.RefreshToken,IdentityServer4.Core.Models.Client)">
            <summary>
            Updates the refresh token.
            </summary>
            <param name="handle">The handle.</param>
            <param name="refreshToken">The refresh token.</param>
            <param name="client">The client.</param>
            <returns>The refresh token handle</returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.IRefreshTokenStore">
            <summary>
            Refresh token storage
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Services.IScopeStore">
            <summary>
            Scope retrieval
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.IScopeStore.FindScopesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets all scopes.
            </summary>
            <returns>List of scopes</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.IScopeStore.GetScopesAsync(System.Boolean)">
            <summary>
            Gets all defined scopes.
            </summary>
            <param name="publicOnly">if set to <c>true</c> only public scopes are returned.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.ISigningKeyService">
            <summary>
            Service that deals with public and private keys used for token generation and metadata
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.ISigningKeyService.GetSigningKeyAsync">
            <summary>
            Retrieves the primary signing key
            </summary>
            <returns>Signing key</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.ISigningKeyService.GetValidationKeysAsync">
            <summary>
            Retrieves all public keys that can be used to validate tokens
            </summary>
            <returns>Public keys</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.ISigningKeyService.GetKidAsync(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Calculates the key id for a given x509 certificate
            </summary>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.ITokenHandleStore">
            <summary>
            Token handle storage
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Services.ITokenService">
            <summary>
            Logic for creating security tokens
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.ITokenService.CreateIdentityTokenAsync(IdentityServer4.Core.Models.TokenCreationRequest)">
            <summary>
            Creates an identity token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>An identity token</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.ITokenService.CreateAccessTokenAsync(IdentityServer4.Core.Models.TokenCreationRequest)">
            <summary>
            Creates an access token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>An access token</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.ITokenService.CreateSecurityTokenAsync(IdentityServer4.Core.Models.Token)">
            <summary>
            Creates a serialized and protected security token.
            </summary>
            <param name="token">The token.</param>
            <returns>A security token in serialized form</returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.ITokenSigningService">
            <summary>
            Logic for signing security tokens
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.ITokenSigningService.SignTokenAsync(IdentityServer4.Core.Models.Token)">
            <summary>
            Signs the token.
            </summary>
            <param name="token">The token.</param>
            <returns>A protected and serialized security token</returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.ITransientDataRepository`1">
            <summary>
            Abstraction for storing transient data (e.g. authorization codes, refresh and reference tokens)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IdentityServer4.Core.Services.ITransientDataRepository`1.StoreAsync(System.String,`0)">
            <summary>
            Stores the data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.ITransientDataRepository`1.GetAsync(System.String)">
            <summary>
            Retrieves the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.ITransientDataRepository`1.RemoveAsync(System.String)">
            <summary>
            Removes the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.ITransientDataRepository`1.GetAllAsync(System.String)">
            <summary>
            Retrieves all data for a subject identifier.
            </summary>
            <param name="subject">The subject identifier.</param>
            <returns>A list of token metadata</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.ITransientDataRepository`1.RevokeAsync(System.String,System.String)">
            <summary>
            Revokes all data for a client and subject id combination.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.Default.DefaultClaimsProvider">
            <summary>
            Default claims provider implementation
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Services.Default.DefaultClaimsProvider._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Services.Default.DefaultClaimsProvider._profile">
            <summary>
            The user service
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultClaimsProvider.#ctor(IdentityServer4.Core.Services.IProfileService,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Services.Default.DefaultClaimsProvider"/> class.
            </summary>
            <param name="users">The users service</param>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultClaimsProvider.GetIdentityTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,IdentityServer4.Core.Models.Client,System.Collections.Generic.IEnumerable{IdentityServer4.Core.Models.Scope},System.Boolean,IdentityServer4.Core.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an identity token
            </summary>
            <param name="subject">The subject</param>
            <param name="client">The client</param>
            <param name="scopes">The requested scopes</param>
            <param name="includeAllIdentityClaims">Specifies if all claims should be included in the token, or if the userinfo endpoint can be used to retrieve them</param>
            <param name="request">The raw request</param>
            <returns>
            Claims for the identity token
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultClaimsProvider.GetAccessTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,IdentityServer4.Core.Models.Client,System.Collections.Generic.IEnumerable{IdentityServer4.Core.Models.Scope},IdentityServer4.Core.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an identity token.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <param name="scopes">The requested scopes.</param>
            <param name="request">The raw request.</param>
            <returns>
            Claims for the access token
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultClaimsProvider.GetStandardSubjectClaims(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the standard subject claims.
            </summary>
            <param name="subject">The subject.</param>
            <returns>A list of standard claims</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultClaimsProvider.GetOptionalClaims(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets additional (and optional) claims from the cookie or incoming subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns>Additional claims</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultClaimsProvider.FilterProtocolClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Filters out protocol claims like amr, nonce etc..
            </summary>
            <param name="claims">The claims.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.Default.DefaultConsentService">
            <summary>
            Default consent service
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Services.Default.DefaultConsentService._store">
            <summary>
            The consent store
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultConsentService.#ctor(IdentityServer4.Core.Services.IConsentStore)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Services.Default.DefaultConsentService"/> class.
            </summary>
            <param name="store">The consent store.</param>
            <exception cref="T:System.ArgumentNullException">store</exception>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultConsentService.RequiresConsentAsync(IdentityServer4.Core.Models.Client,System.Security.Claims.ClaimsPrincipal,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks if consent is required.
            </summary>
            <param name="client">The client.</param>
            <param name="subject">The user.</param>
            <param name="scopes">The scopes.</param>
            <returns>Boolean if consent is required.</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultConsentService.UpdateConsentAsync(IdentityServer4.Core.Models.Client,System.Security.Claims.ClaimsPrincipal,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates the consent.
            </summary>
            <param name="client">The client.</param>
            <param name="subject">The subject.</param>
            <param name="scopes">The scopes.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.Default.DefaultCorsPolicyService">
            <summary>
            Default CORS policy service.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultCorsPolicyService.#ctor(Microsoft.Extensions.Logging.ILogger{IdentityServer4.Core.Services.Default.DefaultCorsPolicyService})">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Services.Default.DefaultCorsPolicyService"/> class.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Services.Default.DefaultCorsPolicyService.AllowedOrigins">
            <summary>
            The list allowed origins that are allowed.
            </summary>
            <value>
            The allowed origins.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Services.Default.DefaultCorsPolicyService.AllowAll">
            <summary>
            Gets or sets a value indicating whether all origins are allowed.
            </summary>
            <value>
              <c>true</c> if allow all; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultCorsPolicyService.IsOriginAllowedAsync(System.String)">
            <summary>
            Determines whether the origin allowed.
            </summary>
            <param name="origin">The origin.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.Default.DefaultEventService">
            <summary>
            Default implementation of the event service. Write events raised to the log.
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Services.Default.DefaultEventService._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultEventService.RaiseAsync``1(IdentityServer4.Core.Events.Event{``0})">
            <summary>
            Raises the specified event.
            </summary>
            <param name="evt">The event.</param>
            <exception cref="T:System.ArgumentNullException">evt</exception>
        </member>
        <member name="T:IdentityServer4.Core.Services.Default.DefaultLocalizationService">
            <summary>
            Default localization services. Uses embedded resource files for strings.
            The category is used to identify which resource file from which to read.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultLocalizationService.GetString(System.String,System.String)">
            <summary>
            Gets a localized string based upon the string's category and identifier.
            </summary>
            <param name="category">The category.</param>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.Default.DefaultRefreshTokenService">
            <summary>
            Default refresh token service
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Services.Default.DefaultRefreshTokenService._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Services.Default.DefaultRefreshTokenService._store">
            <summary>
            The refresh token store
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Services.Default.DefaultRefreshTokenService._events">
            <summary>
            The _events
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultRefreshTokenService.#ctor(IdentityServer4.Core.Services.IRefreshTokenStore,IdentityServer4.Core.Services.IEventService,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Services.Default.DefaultRefreshTokenService" /> class.
            </summary>
            <param name="store">The refresh token store.</param>
            <param name="events">The events.</param>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultRefreshTokenService.CreateRefreshTokenAsync(System.Security.Claims.ClaimsPrincipal,IdentityServer4.Core.Models.Token,IdentityServer4.Core.Models.Client)">
            <summary>
            Creates the refresh token.
            </summary>
            <param name="subject">The subject.</param>
            <param name="accessToken">The access token.</param>
            <param name="client">The client.</param>
            <returns>
            The refresh token handle
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultRefreshTokenService.UpdateRefreshTokenAsync(System.String,IdentityServer4.Core.Models.RefreshToken,IdentityServer4.Core.Models.Client)">
            <summary>
            Updates the refresh token.
            </summary>
            <param name="handle">The handle.</param>
            <param name="refreshToken">The refresh token.</param>
            <param name="client">The client.</param>
            <returns>
            The refresh token handle
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultRefreshTokenService.RaiseRefreshTokenIssuedEventAsync(System.String,IdentityServer4.Core.Models.RefreshToken)">
            <summary>
            Raises the refresh token issued event.
            </summary>
            <param name="handle">The handle.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultRefreshTokenService.RaiseRefreshTokenRefreshedEventAsync(System.String,System.String,IdentityServer4.Core.Models.RefreshToken)">
            <summary>
            Raises the refresh token refreshed event.
            </summary>
            <param name="oldHandle">The old handle.</param>
            <param name="newHandle">The new handle.</param>
            <param name="token">The token.</param>
        </member>
        <member name="T:IdentityServer4.Core.Services.Default.DefaultSigningKeyService">
            <summary>
            Default signing key service based on IdentityServerOptions
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultSigningKeyService.#ctor(IdentityServer4.Core.Configuration.IdentityServerOptions)">
            <summary>
            Initializes the services with identity server options
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultSigningKeyService.GetKidAsync(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Calculates the key id for a given x509 certificate
            </summary>
            <param name="certificate"></param>
            <returns>kid</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultSigningKeyService.GetValidationKeysAsync">
            <summary>
            Retrieves all public keys that can be used to validate tokens
            </summary>
            <returns>x509 certificates</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultSigningKeyService.GetSigningKeyAsync">
            <summary>
            Retrieves the primary signing key
            </summary>
            <returns>x509 certificate</returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.Default.DefaultTokenService">
            <summary>
            Default token service
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Services.Default.DefaultTokenService._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Services.Default.DefaultTokenService._context">
            <summary>
            The identity server context
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Services.Default.DefaultTokenService._claimsProvider">
            <summary>
            The claims provider
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Services.Default.DefaultTokenService._tokenHandles">
            <summary>
            The token handles
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Services.Default.DefaultTokenService._signingService">
            <summary>
            The signing service
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Services.Default.DefaultTokenService._events">
            <summary>
            The events service
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultTokenService.#ctor(IdentityServer4.Core.Hosting.IdentityServerContext,IdentityServer4.Core.Services.IClaimsProvider,IdentityServer4.Core.Services.ITokenHandleStore,IdentityServer4.Core.Services.ITokenSigningService,IdentityServer4.Core.Services.IEventService,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Services.Default.DefaultTokenService" /> class. This overloaded constructor is deprecated and will be removed in 3.0.0.
            </summary>
            <param name="options">The options.</param>
            <param name="claimsProvider">The claims provider.</param>
            <param name="tokenHandles">The token handles.</param>
            <param name="signingService">The signing service.</param>
            <param name="events">The events service.</param>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultTokenService.CreateIdentityTokenAsync(IdentityServer4.Core.Models.TokenCreationRequest)">
            <summary>
            Creates an identity token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>
            An identity token
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultTokenService.CreateAccessTokenAsync(IdentityServer4.Core.Models.TokenCreationRequest)">
            <summary>
            Creates an access token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>
            An access token
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultTokenService.CreateSecurityTokenAsync(IdentityServer4.Core.Models.Token)">
            <summary>
            Creates a serialized and protected security token.
            </summary>
            <param name="token">The token.</param>
            <returns>
            A security token in serialized form
            </returns>
            <exception cref="T:System.InvalidOperationException">Invalid token type.</exception>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultTokenService.HashAdditionalData(System.String)">
            <summary>
            Hashes an additional data (e.g. for c_hash or at_hash).
            </summary>
            <param name="tokenToHash">The token to hash.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.Default.DefaultTokenSigningService">
            <summary>
            Default token signing service
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Services.Default.DefaultTokenSigningService._keyService">
            <summary>
            The signing key service
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultTokenSigningService.#ctor(IdentityServer4.Core.Services.ISigningKeyService)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Services.Default.DefaultTokenSigningService"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultTokenSigningService.SignTokenAsync(IdentityServer4.Core.Models.Token)">
            <summary>
            Signs the token.
            </summary>
            <param name="token">The token.</param>
            <returns>
            A protected and serialized security token
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultTokenSigningService.CreateHeaderAsync(IdentityServer4.Core.Models.Token,System.IdentityModel.Tokens.SecurityKey)">
            <summary>
            Creates the JWT header
            </summary>
            <param name="token">The token.</param>
            <param name="credential">The credentials.</param>
            <returns>The JWT header</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultTokenSigningService.CreatePayloadAsync(IdentityServer4.Core.Models.Token)">
            <summary>
            Creates the JWT payload
            </summary>
            <param name="token">The token.</param>
            <returns>The JWT payload</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.Default.DefaultTokenSigningService.SignAsync(System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Applies the signature to the JWT
            </summary>
            <param name="jwt">The JWT object.</param>
            <returns>The signed JWT</returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.InMemory.InMemoryAuthorizationCodeStore">
            <summary>
            In-memory authorization code store
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryAuthorizationCodeStore.StoreAsync(System.String,IdentityServer4.Core.Models.AuthorizationCode)">
            <summary>
            Stores the data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryAuthorizationCodeStore.GetAsync(System.String)">
            <summary>
            Retrieves the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryAuthorizationCodeStore.RemoveAsync(System.String)">
            <summary>
            Removes the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryAuthorizationCodeStore.GetAllAsync(System.String)">
            <summary>
            Retrieves all data for a subject identifier.
            </summary>
            <param name="subject">The subject identifier.</param>
            <returns>
            A list of token metadata
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryAuthorizationCodeStore.RevokeAsync(System.String,System.String)">
            <summary>
            Revokes all data for a client and subject id combination.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.InMemory.InMemoryClientStore">
            <summary>
            In-memory client store
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryClientStore.#ctor(System.Collections.Generic.IEnumerable{IdentityServer4.Core.Models.Client})">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Services.InMemory.InMemoryClientStore"/> class.
            </summary>
            <param name="clients">The clients.</param>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryClientStore.FindClientByIdAsync(System.String)">
            <summary>
            Finds a client by id
            </summary>
            <param name="clientId">The client id</param>
            <returns>
            The client
            </returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.InMemory.InMemoryConsentStore">
            <summary>
            In-memory consent store
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryConsentStore.LoadAllAsync(System.String)">
            <summary>
            Loads all permissions the subject has granted to all clients.
            </summary>
            <param name="subject">The subject.</param>
            <returns>The permissions.</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryConsentStore.LoadAsync(System.String,System.String)">
            <summary>
            Loads the subject's prior consent for the client.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <returns>The persisted consent.</returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryConsentStore.UpdateAsync(IdentityServer4.Core.Models.Consent)">
            <summary>
            Persists the subject's consent.
            </summary>
            <param name="consent">The consent.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryConsentStore.RevokeAsync(System.String,System.String)">
            <summary>
            Revokes all permissions the subject has given to a client.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.InMemory.InMemoryCorsPolicyService">
            <summary>
            CORS policy service that configures the allowed origins from a list of clients' redirect URLs.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryCorsPolicyService.#ctor(Microsoft.Extensions.Logging.ILogger{IdentityServer4.Core.Services.InMemory.InMemoryCorsPolicyService},System.Collections.Generic.IEnumerable{IdentityServer4.Core.Models.Client})">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Services.InMemory.InMemoryCorsPolicyService"/> class.
            </summary>
            <param name="clients">The clients.</param>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryCorsPolicyService.IsOriginAllowedAsync(System.String)">
            <summary>
            Determines whether origin is allowed.
            </summary>
            <param name="origin">The origin.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.InMemory.InMemoryProfileService">
            <summary>
            In-memory user service
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryProfileService.#ctor(System.Collections.Generic.List{IdentityServer4.Core.Services.InMemory.InMemoryUser})">
            <summary>
            Initializes a new instance of the <see cref="!:InMemoryUserService"/> class.
            </summary>
            <param name="users">The users.</param>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryProfileService.GetProfileDataAsync(IdentityServer4.Core.Models.ProfileDataRequestContext)">
            <summary>
            This method is called whenever claims about the user are requested (e.g. during token creation or via the userinfo endpoint)
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryProfileService.IsActiveAsync(IdentityServer4.Core.Models.IsActiveContext)">
            <summary>
            This method gets called whenever identity server needs to determine if the user is valid or active (e.g. during token issuance or validation)
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">subject</exception>
        </member>
        <member name="T:IdentityServer4.Core.Services.InMemory.InMemoryRefreshTokenStore">
            <summary>
            In-memory refresh token store
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryRefreshTokenStore.StoreAsync(System.String,IdentityServer4.Core.Models.RefreshToken)">
            <summary>
            Stores the data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryRefreshTokenStore.GetAsync(System.String)">
            <summary>
            Retrieves the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryRefreshTokenStore.RemoveAsync(System.String)">
            <summary>
            Removes the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryRefreshTokenStore.GetAllAsync(System.String)">
            <summary>
            Retrieves all data for a subject identifier.
            </summary>
            <param name="subject">The subject identifier.</param>
            <returns>
            A list of token metadata
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryRefreshTokenStore.RevokeAsync(System.String,System.String)">
            <summary>
            Revokes all data for a client and subject id combination.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.InMemory.InMemoryScopeStore">
            <summary>
            In-memory scope store
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryScopeStore.#ctor(System.Collections.Generic.IEnumerable{IdentityServer4.Core.Models.Scope})">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Services.InMemory.InMemoryScopeStore"/> class.
            </summary>
            <param name="scopes">The scopes.</param>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryScopeStore.FindScopesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets all scopes.
            </summary>
            <returns>
            List of scopes
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryScopeStore.GetScopesAsync(System.Boolean)">
            <summary>
            Gets all defined scopes.
            </summary>
            <param name="publicOnly">if set to <c>true</c> only public scopes are returned.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:IdentityServer4.Core.Services.InMemory.InMemoryTokenHandleStore">
            <summary>
            In-memory token handle store
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryTokenHandleStore.StoreAsync(System.String,IdentityServer4.Core.Models.Token)">
            <summary>
            Stores the data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryTokenHandleStore.GetAsync(System.String)">
            <summary>
            Retrieves the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryTokenHandleStore.RemoveAsync(System.String)">
            <summary>
            Removes the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryTokenHandleStore.GetAllAsync(System.String)">
            <summary>
            Retrieves all data for a subject identifier.
            </summary>
            <param name="subject">The subject identifier.</param>
            <returns>
            A list of token metadata
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryTokenHandleStore.RevokeAsync(System.String,System.String)">
            <summary>
            Revokes all data for a client and subject id combination.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Core.Services.InMemory.InMemoryUser">
            <summary>
            In-memory user
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Services.InMemory.InMemoryUser.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Services.InMemory.InMemoryUser.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:IdentityServer4.Core.Services.InMemory.InMemoryUser"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Services.InMemory.InMemoryUser.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Services.InMemory.InMemoryUser.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Services.InMemory.InMemoryUser.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Services.InMemory.InMemoryUser.ProviderId">
            <summary>
            Gets or sets the provider identifier.
            </summary>
            <value>
            The provider identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Services.InMemory.InMemoryUser.Claims">
            <summary>
            Gets or sets the claims.
            </summary>
            <value>
            The claims.
            </value>
        </member>
        <member name="M:IdentityServer4.Core.Services.InMemory.InMemoryUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Services.InMemory.InMemoryUser"/> class.
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Validation.BasicAuthenticationSecretParser">
            <summary>
            Parses a Basic Authentication header
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.BasicAuthenticationSecretParser.#ctor(IdentityServer4.Core.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates the parser with a reference to identity server options
            </summary>
            <param name="options">IdentityServer options</param>
        </member>
        <member name="M:IdentityServer4.Core.Validation.BasicAuthenticationSecretParser.ParseAsync(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            Tries to find a secret on the environment that can be used for authentication
            </summary>
            <param name="environment">The environment.</param>
            <returns>
            A parsed secret
            </returns>
        </member>
        <member name="T:IdentityServer4.Core.Validation.DefaultCustomRequestValidator">
            <summary>
            Default custom request validator
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.DefaultCustomRequestValidator.ValidateAuthorizeRequestAsync(IdentityServer4.Core.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Custom validation logic for the authorize request.
            </summary>
            <param name="request">The validated request.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Validation.DefaultCustomRequestValidator.ValidateTokenRequestAsync(IdentityServer4.Core.Validation.ValidatedTokenRequest)">
            <summary>
            Custom validation logic for the token request.
            </summary>
            <param name="request">The validated request.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="T:IdentityServer4.Core.Validation.DefaultCustomTokenValidator">
            <summary>
            Default custom token validator
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Validation.DefaultCustomTokenValidator._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Validation.DefaultCustomTokenValidator._profile">
            <summary>
            The user service
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Validation.DefaultCustomTokenValidator._clients">
            <summary>
            The client store
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.DefaultCustomTokenValidator.#ctor(IdentityServer4.Core.Services.IProfileService,IdentityServer4.Core.Services.IClientStore,Microsoft.Extensions.Logging.ILogger{IdentityServer4.Core.Validation.DefaultCustomTokenValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Validation.DefaultCustomTokenValidator"/> class.
            </summary>
            <param name="users">The users store.</param>
            <param name="clients">The client store.</param>
        </member>
        <member name="M:IdentityServer4.Core.Validation.DefaultCustomTokenValidator.ValidateAccessTokenAsync(IdentityServer4.Core.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for access tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Validation.DefaultCustomTokenValidator.ValidateIdentityTokenAsync(IdentityServer4.Core.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for identity tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="T:IdentityServer4.Core.Validation.HashedSharedSecretValidator">
            <summary>
            Validates a shared secret stored in SHA256 or SHA512
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.HashedSharedSecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{IdentityServer4.Core.Models.Secret},IdentityServer4.Core.Models.ParsedSecret)">
            <summary>
            Validates a secret
            </summary>
            <param name="secrets">The stored secrets.</param>
            <param name="parsedSecret">The received secret.</param>
            <returns>
            A validation result
            </returns>
            <exception cref="T:System.ArgumentNullException">Id or cedential</exception>
        </member>
        <member name="T:IdentityServer4.Core.Validation.PlainTextSharedSecretValidator">
            <summary>
            Validates a secret stored in plain text
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.PlainTextSharedSecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{IdentityServer4.Core.Models.Secret},IdentityServer4.Core.Models.ParsedSecret)">
            <summary>
            Validates a secret
            </summary>
            <param name="secrets">The stored secrets.</param>
            <param name="parsedSecret">The received secret.</param>
            <returns>
            A validation result
            </returns>
            <exception cref="T:System.ArgumentException">id or credential is missing.</exception>
        </member>
        <member name="T:IdentityServer4.Core.Validation.PostBodySecretParser">
            <summary>
            Parses a POST body for secrets
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.PostBodySecretParser.#ctor(IdentityServer4.Core.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates the parser with options
            </summary>
            <param name="options">IdentityServer options</param>
        </member>
        <member name="M:IdentityServer4.Core.Validation.PostBodySecretParser.ParseAsync(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            Tries to find a secret on the environment that can be used for authentication
            </summary>
            <param name="environment">The environment.</param>
            <returns>
            A parsed secret
            </returns>
        </member>
        <member name="T:IdentityServer4.Core.Validation.StrictRedirectUriValidator">
            <summary>
            Default implementation of redirect URI validator. Validates the URIs against
            the client's configured URIs.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.StrictRedirectUriValidator.StringCollectionContainsString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Checks if a given URI string is in a collection of strings (using ordinal ignore case comparison)
            </summary>
            <param name="uris">The uris.</param>
            <param name="requestedUri">The requested URI.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Core.Validation.StrictRedirectUriValidator.IsRedirectUriValidAsync(System.String,IdentityServer4.Core.Models.Client)">
            <summary>
            Determines whether a redirect URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns>
              <c>true</c> is the URI is valid; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:IdentityServer4.Core.Validation.StrictRedirectUriValidator.IsPostLogoutRedirectUriValidAsync(System.String,IdentityServer4.Core.Models.Client)">
            <summary>
            Determines whether a post logout URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns>
              <c>true</c> is the URI is valid; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:IdentityServer4.Core.Validation.ICustomGrantValidator">
            <summary>
            Handles validation of token requests using custom grant types
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.ICustomGrantValidator.ValidateAsync(IdentityServer4.Core.Validation.ValidatedTokenRequest)">
            <summary>
            Validates the custom grant request.
            </summary>
            <param name="request">The validated token request.</param>
            <returns>A principal</returns>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ICustomGrantValidator.GrantType">
            <summary>
            Returns the grant type this validator can deal with
            </summary>
            <value>
            The type of the grant.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Validation.ICustomRequestValidator">
            <summary>
            Allows inserting custom validation logic into authorize and token requests
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.ICustomRequestValidator.ValidateAuthorizeRequestAsync(IdentityServer4.Core.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Custom validation logic for the authorize request.
            </summary>
            <param name="request">The validated request.</param>
            <returns>The validation result</returns>
        </member>
        <member name="M:IdentityServer4.Core.Validation.ICustomRequestValidator.ValidateTokenRequestAsync(IdentityServer4.Core.Validation.ValidatedTokenRequest)">
            <summary>
            Custom validation logic for the token request.
            </summary>
            <param name="request">The validated request.</param>
            <returns>The validation result</returns>
        </member>
        <member name="T:IdentityServer4.Core.Validation.ICustomTokenValidator">
            <summary>
            Allows inserting custom token validation logic
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.ICustomTokenValidator.ValidateAccessTokenAsync(IdentityServer4.Core.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for access tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>The validation result</returns>
        </member>
        <member name="M:IdentityServer4.Core.Validation.ICustomTokenValidator.ValidateIdentityTokenAsync(IdentityServer4.Core.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for identity tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>The validation result</returns>
        </member>
        <member name="T:IdentityServer4.Core.Validation.IRedirectUriValidator">
            <summary>
            Models the logic when validating redirect and post logout redirect URIs.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.IRedirectUriValidator.IsRedirectUriValidAsync(System.String,IdentityServer4.Core.Models.Client)">
            <summary>
            Determines whether a redirect URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns><c>true</c> is the URI is valid; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:IdentityServer4.Core.Validation.IRedirectUriValidator.IsPostLogoutRedirectUriValidAsync(System.String,IdentityServer4.Core.Models.Client)">
            <summary>
            Determines whether a post logout URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns><c>true</c> is the URI is valid; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:IdentityServer4.Core.Validation.IResourceOwnerPasswordValidator">
            <summary>
            Handles validation of resource owner password credentials
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.IResourceOwnerPasswordValidator.ValidateAsync(System.String,System.String,IdentityServer4.Core.Validation.ValidatedTokenRequest)">
            <summary>
            Validates the resource owner password credential
            </summary>
            <param name="request">The validated token request.</param>
            <returns>The validation result</returns>
        </member>
        <member name="T:IdentityServer4.Core.Validation.ISecretParser">
            <summary>
            A service for parsing secrets found on the environment
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.ISecretParser.ParseAsync(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            Tries to find a secret on the environment that can be used for authentication
            </summary>
            <param name="environment">The environment.</param>
            <returns>A parsed secret</returns>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ISecretParser.AuthenticationMethod">
            <summary>
            Returns the authentication method name that this parser implements
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Validation.ISecretValidator">
            <summary>
            Service for validating a received secret against a stored secret
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.ISecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{IdentityServer4.Core.Models.Secret},IdentityServer4.Core.Models.ParsedSecret)">
            <summary>
            Validates a secret
            </summary>
            <param name="secrets">The stored secrets.</param>
            <param name="parsedSecret">The received secret.</param>
            <returns>A validation result</returns>
        </member>
        <member name="T:IdentityServer4.Core.Validation.AuthorizeRequestValidationResult">
            <summary>
            Validation result for authorize requests
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.AuthorizeRequestValidationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Validation.AuthorizeRequestValidationResult"/> class.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Validation.AuthorizeRequestValidationResult.ErrorType">
            <summary>
            Gets or sets the type of the error (user vs client).
            </summary>
            <value>
            The type of the error.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.AuthorizeRequestValidationResult.ValidatedRequest">
            <summary>
            Gets or sets the validated request.
            </summary>
            <value>
            The validated request.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Validation.ClientSecretValidationResult">
            <summary>
            Validation result for client validation
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ClientSecretValidationResult.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Validation.CustomGrantValidationResult">
            <summary>
            Models the result of custom grant validation.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Validation.CustomGrantValidationResult.Principal">
            <summary>
            Gets or sets the principal which represents the result of the authentication.
            </summary>
            <value>
            The principal.
            </value>
        </member>
        <member name="M:IdentityServer4.Core.Validation.CustomGrantValidationResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Validation.CustomGrantValidationResult"/> class with an error message.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:IdentityServer4.Core.Validation.CustomGrantValidationResult.#ctor(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Validation.CustomGrantValidationResult"/> class with a given principal.
            Warning: the principal needs to include the required claims - it is recommended to use the other constructor that does validation.
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.CustomGrantValidationResult.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Validation.CustomGrantValidationResult"/> class.
            </summary>
            <param name="subject">The subject claim used to uniquely identifier the user.</param>
            <param name="authenticationMethod">The authentication method which describes the custom grant type.</param>
            <param name="claims">Additional claims that will be maintained in the principal.</param>
            <param name="identityProvider">The identity provider.</param>
        </member>
        <member name="T:IdentityServer4.Core.Validation.ErrorTypes">
            <summary>
            Indicates if a <see cref="T:IdentityServer4.Core.Validation.ValidationResult"/> is an error to be displayed to the user or returned to the client.
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Validation.ErrorTypes.Client">
            <summary>
            client error
            </summary>
        </member>
        <member name="F:IdentityServer4.Core.Validation.ErrorTypes.User">
            <summary>
            user error
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Validation.ScopeSecretValidationResult">
            <summary>
            Validation result for client validation
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ScopeSecretValidationResult.Scope">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Validation.SecretValidationResult">
            <summary>
            Validation result for secrets
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Validation.SecretValidationResult.Success">
            <summary>
            Gets or sets a value indicating whether the secret validation was successful.
            </summary>
            <value>
              <c>true</c> if success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Validation.TokenRequestValidationResult">
            <summary>
            Validation result for token requests
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Validation.TokenValidationResult">
            <summary>
            Modles the validation result of access tokens and id tokens.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Validation.TokenValidationResult.Claims">
            <summary>
            Gets or sets the claims.
            </summary>
            <value>
            The claims.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.TokenValidationResult.Jwt">
            <summary>
            Gets or sets the JWT.
            </summary>
            <value>
            The JWT.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.TokenValidationResult.ReferenceToken">
            <summary>
            Gets or sets the reference token.
            </summary>
            <value>
            The reference token.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.TokenValidationResult.ReferenceTokenId">
            <summary>
            Gets or sets the reference token identifier.
            </summary>
            <value>
            The reference token identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.TokenValidationResult.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest">
            <summary>
            Models a validated request to the authorize endpoint.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.ResponseType">
            <summary>
            Gets or sets the type of the response.
            </summary>
            <value>
            The type of the response.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.ResponseMode">
            <summary>
            Gets or sets the response mode.
            </summary>
            <value>
            The response mode.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.Flow">
            <summary>
            Gets or sets the flow.
            </summary>
            <value>
            The flow.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.RedirectUri">
            <summary>
            Gets or sets the redirect URI.
            </summary>
            <value>
            The redirect URI.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.RequestedScopes">
            <summary>
            Gets or sets the requested scopes.
            </summary>
            <value>
            The requested scopes.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.WasConsentShown">
            <summary>
            Gets or sets a value indicating whether consent was shown.
            </summary>
            <value>
              <c>true</c> if consent was shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.UiLocales">
            <summary>
            Gets or sets the UI locales.
            </summary>
            <value>
            The UI locales.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.IsOpenIdRequest">
            <summary>
            Gets or sets a value indicating whether the request was an OpenID Connect request.
            </summary>
            <value>
            <c>true</c> if the request was an OpenID Connect request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.IsResourceRequest">
            <summary>
            Gets or sets a value indicating whether this instance is resource request.
            </summary>
            <value>
            <c>true</c> if this instance is resource request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.AuthenticationContextReferenceClasses">
            <summary>
            Gets or sets the authentication context reference classes.
            </summary>
            <value>
            The authentication context reference classes.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.DisplayMode">
            <summary>
            Gets or sets the display mode.
            </summary>
            <value>
            The display mode.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.PromptMode">
            <summary>
            Gets or sets the prompt mode.
            </summary>
            <value>
            The prompt mode.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.MaxAge">
            <summary>
            Gets or sets the maximum age.
            </summary>
            <value>
            The maximum age.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.LoginHint">
            <summary>
            Gets or sets the login hint.
            </summary>
            <value>
            The login hint.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.AccessTokenRequested">
            <summary>
            Gets a value indicating whether an access token was requested.
            </summary>
            <value>
            <c>true</c> if an access token was requested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Validation.ValidatedAuthorizeRequest"/> class.
            </summary>
        </member>
        <member name="T:IdentityServer4.Core.Validation.ValidatedRequest">
            <summary>
            Base class for a validate authorize or token request
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedRequest.Raw">
            <summary>
            Gets or sets the raw request data
            </summary>
            <value>
            The raw.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedRequest.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedRequest.SessionId">
            <summary>
            Gets or sets the session identifier.
            </summary>
            <value>
            The session identifier.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedRequest.Options">
            <summary>
            Gets or sets the identity server options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedRequest.ValidatedScopes">
            <summary>
            Gets or sets the validated scopes.
            </summary>
            <value>
            The validated scopes.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Validation.ValidatedTokenRequest">
            <summary>
            Models a validated request to the token endpoint.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedTokenRequest.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedTokenRequest.GrantType">
            <summary>
            Gets or sets the type of the grant.
            </summary>
            <value>
            The type of the grant.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedTokenRequest.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedTokenRequest.UserName">
            <summary>
            Gets or sets the username used in the request.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedTokenRequest.SignInMessage">
            <summary>
            Gets or sets the sign in message.
            </summary>
            <value>
            The sign in message.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedTokenRequest.RefreshToken">
            <summary>
            Gets or sets the refresh token.
            </summary>
            <value>
            The refresh token.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedTokenRequest.RefreshTokenHandle">
            <summary>
            Gets or sets the refresh token handle.
            </summary>
            <value>
            The refresh token handle.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedTokenRequest.AuthorizationCode">
            <summary>
            Gets or sets the authorization code.
            </summary>
            <value>
            The authorization code.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidatedTokenRequest.AuthorizationCodeHandle">
            <summary>
            Gets or sets the authorization code handle.
            </summary>
            <value>
            The authorization code handle.
            </value>
        </member>
        <member name="T:IdentityServer4.Core.Validation.ValidationResult">
            <summary>
            Minimal validation result class (base-class for more complext validation results)
            </summary>
        </member>
        <member name="M:IdentityServer4.Core.Validation.ValidationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer4.Core.Validation.ValidationResult"/> class.
            </summary>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidationResult.IsError">
            <summary>
            Gets or sets a value indicating whether the validation was successful.
            </summary>
            <value>
              <c>true</c> if the validation is failed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidationResult.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:IdentityServer4.Core.Validation.ValidationResult.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
    </members>
</doc>
